/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/ky@0.9.0/index.js
 * 
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
const getGlobal=t=>"undefined"!=typeof self&&self&&t in self?self[t]:"undefined"!=typeof window&&window&&t in window?window[t]:"undefined"!=typeof global&&global&&t in global?global[t]:"undefined"!=typeof globalThis&&globalThis?globalThis[t]:void 0,document=getGlobal("document"),Headers=getGlobal("Headers"),Response=getGlobal("Response"),fetch=getGlobal("fetch"),AbortController=getGlobal("AbortController"),isObject=t=>null!==t&&"object"==typeof t,supportsAbortController="function"==typeof getGlobal("AbortController"),deepMerge=(...t)=>{let e={};for(const r of t)if(Array.isArray(r))Array.isArray(e)||(e=[]),e=[...e,...r];else if(isObject(r))for(let[t,o]of Object.entries(r))isObject(o)&&Reflect.has(e,t)&&(o=deepMerge(e[t],o)),e={...e,[t]:o};return e},requestMethods=["get","post","put","patch","head","delete"],responseTypes=["json","text","formData","arrayBuffer","blob"],retryMethods=new Set(["get","put","head","delete","options","trace"]),retryStatusCodes=new Set([408,413,429,500,502,503,504]),retryAfterStatusCodes=new Set([413,429,503]);class HTTPError extends Error{constructor(t){super(t.statusText),this.name="HTTPError",this.response=t}}class TimeoutError extends Error{constructor(){super("Request timed out"),this.name="TimeoutError"}}const delay=t=>new Promise(e=>setTimeout(e,t)),timeout=(t,e,r)=>Promise.race([t,(async()=>{throw await delay(e),r&&setTimeout(()=>r.abort(),1),new TimeoutError})()]),normalizeRequestMethod=t=>requestMethods.includes(t)?t.toUpperCase():t;class Ky{constructor(t,{timeout:e=1e4,hooks:r,throwHttpErrors:o=!0,searchParams:s,json:n,...i}){if(this._retryCount=0,this._options={method:"get",credentials:"same-origin",retry:2,...i},supportsAbortController&&(this.abortController=new AbortController,this._options.signal&&this._options.signal.addEventListener("abort",()=>{this.abortController.abort()}),this._options.signal=this.abortController.signal),this._options.method=normalizeRequestMethod(this._options.method),this._options.prefixUrl=String(this._options.prefixUrl||""),this._input=String(t||""),this._options.prefixUrl&&this._input.startsWith("/"))throw new Error("`input` must not begin with a slash when using `prefixUrl`");if(this._options.prefixUrl&&!this._options.prefixUrl.endsWith("/")&&(this._options.prefixUrl+="/"),this._input=this._options.prefixUrl+this._input,s){const t=new URL(this._input,document&&document.baseURI);if("string"==typeof s||URLSearchParams&&s instanceof URLSearchParams)t.search=s;else{if(!Object.values(s).every(t=>"number"==typeof t||"string"==typeof t))throw new Error("The `searchParams` option must be either a string, `URLSearchParams` instance or an object with string and number values");t.search=new URLSearchParams(s).toString()}this._input=t.toString()}this._timeout=e,this._hooks=deepMerge({beforeRequest:[],afterResponse:[]},r),this._throwHttpErrors=o;const a=new Headers(this._options.headers||{});if(n){if(this._options.body)throw new Error("The `json` option cannot be used with the `body` option");a.set("content-type","application/json"),this._options.body=JSON.stringify(n)}this._options.headers=a;const h=async()=>{let t=await this._fetch();for(const e of this._hooks.afterResponse){const r=await e(t.clone());r instanceof Response&&(t=r)}if(!t.ok&&this._throwHttpErrors)throw new HTTPError(t);return t},l=retryMethods.has(this._options.method.toLowerCase())?this._retry(h):h();for(const t of responseTypes)l[t]=(async()=>(await l).clone()[t]());return l}_calculateRetryDelay(t){if(this._retryCount++,this._retryCount<this._options.retry&&!(t instanceof TimeoutError)){if(t instanceof HTTPError){if(!retryStatusCodes.has(t.response.status))return 0;const e=t.response.headers.get("Retry-After");if(e&&retryAfterStatusCodes.has(t.response.status)){let t=Number(e);return Number.isNaN(t)?t=Date.parse(e)-Date.now():t*=1e3,t}if(413===t.response.status)return 0}return.3*2**(this._retryCount-1)*1e3}return 0}async _retry(t){try{return await t()}catch(e){const r=this._calculateRetryDelay(e);if(0!==r&&this._retryCount>0)return await delay(r),this._retry(t);if(this._throwHttpErrors)throw e}}async _fetch(){for(const t of this._hooks.beforeRequest)await t(this._options);return timeout(fetch(this._input,this._options),this._timeout,this.abortController)}}const createInstance=(t={})=>{if(!isObject(t)||Array.isArray(t))throw new TypeError("The `defaultOptions` argument must be an object");const e=(e,r)=>new Ky(e,deepMerge({},t,r));for(const r of requestMethods)e[r]=((e,o)=>new Ky(e,deepMerge({},t,o,{method:r})));return e.extend=(t=>createInstance(t)),e};export default createInstance();export{HTTPError,TimeoutError};
//# sourceMappingURL=/sm/de939171d70d98031730eabaf5a3571eeb27217094f565b6a171e23b6847f9db.map